import datetime

from django.db import models
from django.urls import reverse

from djmoney.models.fields import MoneyField

from shared.models import Contact, Sponsor

# set the year choices for various drop-downs - earliest data is from 2014
YEAR_CHOICES = []
for yr in range(2014, (datetime.datetime.now().year + 2)):
    YEAR_CHOICES.append((yr, str(yr)))


class Filecatlist(models.Model):
    """

    Stores list of categories for proposal file uploads, related to :model:`proposal.Fileupload`.

    """

    cat_list = models.CharField(
        max_length=50,
        blank=True
    )

    class Meta:
        verbose_name = 'file category'
        verbose_name_plural = 'file categories'

    def __str__(self):
        return self.cat_list


class Status(models.Model):
    """

    Stores a list of proposal statuses, related to :model:`proposal.Proposal`

    """
    status = models.CharField(
        max_length=20,
        blank=True
    )

    class Meta:
        verbose_name_plural = 'statuses'

    def __str__(self):
        return self.status


class Fundtype(models.Model):
    """

    Stores the status of funding (e.g. new, carry over, proposed, etc.), related to :model:`proposal.Fundfy`.

    """
    fund_type = models.CharField(
        max_length=25,
        blank=True
    )

    class Meta:
        verbose_name = 'Fund Type'
        verbose_name_plural = 'Fund Types'

    def __str__(self):
        return self.fund_type


class Fundcodelist(models.Model):
    """

    Stores a list of the fund codes, related to :model:`proposal.Fundfy`

    """
    fund_code = models.CharField(
        max_length=10,
        blank=True
    )

    class Meta:
        verbose_name = 'Fund Code List'

    def __str__(self):
        return self.fund_code


class Proposal(models.Model):
    """

    Stores information about PMEL research proposals.

    """
    proposal_id = models.CharField(
        max_length=10,
        unique=True,
        blank=True,
        null=True,
        verbose_name='Project ID'
    )
    proposal_title = models.CharField(
        max_length=200,
        blank=True,
        verbose_name='Proposal Title'
    )
    investigator_supported = models.ForeignKey(
        Contact,
        on_delete=models.CASCADE,
        blank=True,
        null=True,
        verbose_name='Investigator Supported',
        related_name='proposal_contact'
    )
    sponsor = models.ForeignKey(
        Sponsor,
        on_delete=models.DO_NOTHING,
        blank=True,
        null=True
    )
    status = models.ForeignKey(
        Status,
        on_delete=models.DO_NOTHING,
        blank=True,
        null=True
    )
    fund_code = models.ForeignKey(
        Fundcodelist,
        on_delete=models.DO_NOTHING,
        blank=True,
        null=True
    )
    date_submitted = models.DateField(
        blank=True,
        null=True
    )
    proposal_notes = models.TextField(
        blank=True
    )
    year_proposed = models.IntegerField(
        verbose_name='FY Submitted',
        choices=YEAR_CHOICES,
        default=datetime.datetime.now().year
    )
    slug = models.SlugField(
        help_text="A short label, used in the URLs to camouflage the primary key - autogenerated == proposal_id..",
        unique=True,
        max_length=10,
    )

    class Meta:
        ordering = ['proposal_id']

    def __str__(self):
        return str(self.proposal_id)

    def get_absolute_url(self):
        return reverse('proposal:proposal_detail', kwargs={'slug': self.slug})


class Fundfy(models.Model):
    """

    Stores the funds proposed, received, and carried over. Related to :model:`proposal.Proposal`.

    """
    proposal_id = models.ForeignKey(
        Proposal,
        on_delete=models.CASCADE,
        blank=True,
        null=True,
    )
    fcfy = models.CharField(
        max_length=10,
        blank=True
    )
    budget = MoneyField(
        max_digits=14,
        decimal_places=2,
        default_currency='USD'
    )
    funds_expire = models.DateField(
        blank=True,
        null=True
    )
    # TODO: consider changing to an enumerated list - will this change that often?
    fund_type = models.ForeignKey(
        Fundtype,
        on_delete=models.DO_NOTHING,
        blank=True,
        null=True
    )

    class Meta:
        ordering = ['fcfy']

    def __str__(self):
        return str(self.proposal_id) \
               + ', '\
               + str(self.fund_type)\
               + ', '\
               + str(self.fcfy)\
               + ', '\
               + str(self.budget)


class Fileupload(models.Model):
    """

    Uploads Proposal files to media/documents/proposals, related to :model:`proposal.Proposal`.

    """
    proposal_id = models.ForeignKey(
        Proposal,
        on_delete=models.CASCADE,
        blank=True,
        null=True
    )
    file_category = models.ForeignKey(
        Filecatlist,
        on_delete=models.DO_NOTHING,
        blank=True,
        null=True
    )
    file_upload = models.FileField(
        upload_to='documents\\proposals'
    )
